import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class Main {

	static int LOGN;

	private int[][] g;
	int depths[];
	int par[][];

	private int[][] getGraph(int n) throws IOException {
		int edges[][] = new int[n - 1][2];
		int freq[] = new int[n];
		for (int i = 0; i < n - 1; i++) {
			edges[i] = new int[] { ni() - 1, ni() - 1 };
			freq[edges[i][0]]++;
			freq[edges[i][1]]++;
		}

		int[][] g = new int[n][];
		for (int i = 0; i < n; i++)
			g[i] = new int[freq[i]];

		for (int[] e : edges) {
			int u = e[0];
			int v = e[1];
			g[u][freq[u] - 1] = v;
			g[v][freq[v] - 1] = u;
			freq[u]--;
			freq[v]--;
		}
		return g;
	}

	private void dfs(int current, int parent) {
		for (int c : g[current]) {
			if (c != parent) {
				par[0][c] = current;
				depths[c] = depths[current] + 1;
				dfs(c, current);
			}
		}
	}

	int lca(int u, int v) {
		if (depths[v] < depths[u]) {
			u ^= v;
			v ^= u;
			u ^= v;
		}
		int d = depths[v] - depths[u];
		for (int i = 0; i < LOGN; i++)
			if (((d >> i) & 1) == 1)
				v = par[i][v];
		for (int i = LOGN - 1; i >= 0; i--)
			if (par[i][u] != par[i][v]) {
				u = par[i][u];
				v = par[i][v];
			}
		if (u == v)
			return v;
		return par[0][v];
	}

	private void solve() throws IOException {

		int n = ni();
		int q = ni();
		depths = new int[n];
		for (LOGN = 0; 1 << LOGN < n; LOGN++)
			continue;
		par = new int[LOGN][n];
		g = getGraph(n);
		dfs(0, -1);
		// Helper.tr(par);
		for (int i = 1; i < LOGN; i++)
			for (int j = 0; j < n; j++)
				par[i][j] = par[i - 1][par[i - 1][j]];
		// Helper.tr(par);
		// Helper.tr(depths);
		for (int i = 0; i < q; i++) {
			int a = ni() - 1;
			int b = ni() - 1;
			int c = ni() - 1;
			int ab = lca(a, b);
			int ac = lca(a, c);
			int bc = lca(b, c);
			int tmp = depths[a] + depths[b] + depths[c];
			int sum_ab = tmp - depths[ab] - 2 * depths[lca(ab, c)];
			int sum_ac = tmp - depths[ac] - 2 * depths[lca(ac, b)];
			int sum_bc = tmp - depths[bc] - 2 * depths[lca(bc, a)];
			int min = Math.min(Math.min(sum_ab, sum_ac), sum_bc);
			if (min == sum_ab)
				out.println((ab + 1) + " " + min);
			else if (min == sum_ac)
				out.println((ac + 1) + " " + min);
			else
				out.println((bc + 1) + " " + min);
		}
		out.close();

	}

	static BufferedReader in;
	static PrintWriter out;
	static StringTokenizer tok;

	private int[][] na(int n) throws IOException {
		int[][] a = new int[n][2];
		for (int i = 0; i < n; i++) {
			a[i][0] = ni();
			a[i][1] = i;
		}
		return a;
	}

	String ns() throws IOException {
		while (!tok.hasMoreTokens()) {
			tok = new StringTokenizer(in.readLine(), " ");
		}
		return tok.nextToken();
	}

	int ni() throws IOException {
		return Integer.parseInt(ns());
	}

	long nl() throws IOException {
		return Long.parseLong(ns());
	}

	double nd() throws IOException {
		return Double.parseDouble(ns());
	}

	String[] nsa(int n) throws IOException {
		String[] res = new String[n];
		for (int i = 0; i < n; i++) {
			res[i] = ns();
		}
		return res;
	}

	int[] nia(int n) throws IOException {
		int[] res = new int[n];
		for (int i = 0; i < n; i++) {
			res[i] = ni();
		}
		return res;
	}

	long[] nla(int n) throws IOException {
		long[] res = new long[n];
		for (int i = 0; i < n; i++) {
			res[i] = nl();
		}
		return res;
	}

	public static void main(String[] args) throws IOException {
		in = new BufferedReader(new InputStreamReader(System.in));
		out = new PrintWriter(System.out);
		tok = new StringTokenizer("");
		Main main = new Main();
		main.solve();
		out.close();
	}
}