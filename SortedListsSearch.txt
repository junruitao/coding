//   Search many lists
	public int search(List<Integer> prices[], int a[], int kth) {
		int min = Integer.MAX_VALUE;
		int max = Integer.MIN_VALUE;
		int totalCnt = 0;
		for (int i : a)
			totalCnt += prices[i - 1].size();
		if (totalCnt < kth)
			return -1;
		for (int i : a) {
			min = Math.min(prices[i - 1].get(0), min);
			max = Math.max(prices[i - 1].get(prices[i - 1].size() - 1), max);
		}
		while (min <= max) {
			int count[] = new int[] { 0, 0 };
			int m = (min + max) / 2;
			for (int i : a)
				add(count, search(prices[i - 1], m));
			if (count[0] >= kth)
				max = m - 1;
			else if (count[0] + count[1] < kth)
				min = m + 1;
			else
				return m;
		}
		return -1;
	}

	private void add(int[] a1, int[] a2) {
		for (int i = 0; i < a1.length; i++)
			a1[i] += a2[i];
	}

	// return how many number lt/eq to key in one list
	private int[] search(List<Integer> a, int key) {
		int i = Collections.binarySearch(a, key);
		int[] ret = new int[] { 0, 0 };
		if (i < 0)
			ret[0] = -i - 1;
		else {
			int j = i;
			ret[1] = 1;
			while (j < a.size() - 1 && a.get(j + 1) == key) {
				j++;
				ret[1]++;
			}
			while (i > 0 && a.get(i - 1) == key) {
				i--;
				ret[1]++;
			}
			ret[0] = i;
		}
//		System.out.println(ret[0] + " " + ret[1]);
		return ret;
	}