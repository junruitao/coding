import java.util.Arrays;

class Solution {
	// find kth number
	public int search(int a[], int b[], int kth) {
		int min = Math.min(a[0], b[0]);
		int max = Math.max(a[a.length - 1], b[b.length - 1]);
		while (true) {
			int count[] = new int[] { 0, 0 };
			int m = (min + max) / 2;
			count = search(a, m);
			add(count, search(b, m));
			if (count[0] >= kth)
				max = m - 1;
			else if (count[0] + count[1] < kth)
				min = m + 1;
			else
				return m;
		}
	}

	private void add(int[] a1, int[] a2) {
		for (int i = 0; i < a1.length; i++)
			a1[i] += a2[i];
	}

	// return how many number lt/eq to key
	private int[] search(int a[], int key) {
		int i = Arrays.binarySearch(a, key);
		int[] ret = new int[] { 0, 0 };
		if (i < 0)
			ret[0] = -i - 1;
		else {
			int j = i;
			ret[1] = 1;
			while (j < a.length - 1 && a[j + 1] == key) {
				j++;
				ret[1]++;
			}
			while (i > 0 && a[i - 1] == key) {
				i--;
				ret[1]++;
			}
			ret[0] = i;
		}
		// System.out.println(ret[0] + " " + ret[1]);
		return ret;
	}

}