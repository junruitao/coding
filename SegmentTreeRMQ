	public class SegmentTreeRMQ {
		public int M, H, N;
		public int[] st;

		public SegmentTreeRMQ(int n) {
			N = n;
			M = Integer.highestOneBit(Math.max(N - 1, 1)) << 2;
			H = M >>> 1;
			st = new int[M];
			Arrays.fill(st, 0, M, Integer.MAX_VALUE);
		}

		public SegmentTreeRMQ(int[] a) {
			N = a.length;
			M = Integer.highestOneBit(Math.max(N - 1, 1)) << 2;
			H = M >>> 1;
			st = new int[M];
			for (int i = 0; i < N; i++) {
				st[H + i] = a[i];
			}
			Arrays.fill(st, H + N, M, Integer.MAX_VALUE);
			for (int i = H - 1; i >= 1; i--)
				propagate(i);
		}

		public void update(int pos, int x) {
			st[H + pos] = x;
			for (int i = (H + pos) >>> 1; i >= 1; i >>>= 1)
				propagate(i);
		}

		private void propagate(int i) {
			st[i] = Math.min(st[2 * i], st[2 * i + 1]);
		}

		public int minx(int l, int r) {
			int min = Integer.MAX_VALUE;
			if (l >= r)
				return min;
			while (l != 0) {
				int f = l & -l;
				if (l + f > r)
					break;
				int v = st[(H + l) / f];
				if (v < min)
					min = v;
				l += f;
			}

			while (l < r) {
				int f = r & -r;
				int v = st[(H + r) / f - 1];
				if (v < min)
					min = v;
				r -= f;
			}
			return min;
		}

		public int min(int l, int r) {
			return l >= r ? Integer.MAX_VALUE : min(l, r, 0, H, 1);
		}

		private int min(int l, int r, int cl, int cr, int cur) {
			if (l <= cl && cr <= r) {
				return st[cur];
			} else {
				int mid = cl + cr >>> 1;
				int ret = Integer.MAX_VALUE;
				if (cl < r && l < mid) {
					ret = Math.min(ret, min(l, r, cl, mid, 2 * cur));
				}
				if (mid < r && l < cr) {
					ret = Math.min(ret, min(l, r, mid, cr, 2 * cur + 1));
				}
				return ret;
			}
		}

		public int firstle(int l, int v) {
			int cur = H + l;
			while (true) {
				if (st[cur] <= v) {
					if (cur < H) {
						cur = 2 * cur;
					} else {
						return cur - H;
					}
				} else {
					cur++;
					if ((cur & cur - 1) == 0)
						return -1;
					if ((cur & 1) == 0)
						cur >>>= 1;
				}
			}
		}

		public int lastle(int l, int v) {
			int cur = H + l;
			while (true) {
				if (st[cur] <= v) {
					if (cur < H) {
						cur = 2 * cur + 1;
					} else {
						return cur - H;
					}
				} else {
					if ((cur & cur - 1) == 0)
						return -1;
					cur--;
					if ((cur & 1) == 1)
						cur >>>= 1;
				}
			}
		}
	}
